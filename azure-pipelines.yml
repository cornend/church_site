# Python Django
# Test a Django project on multiple versions of Python.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/python

trigger:
- master

variables:
  # Agent VM image name
  vmImageName: 'ubuntu-latest'

  # Project root folder. Point to the folder containing manage.py file.
  projectRoot: $(System.DefaultWorkingDirectory)
  
  # Python version: 3.7
  pythonVersion: '3.7'

stages:
- stage: Test
  displayName: Test stage
  jobs:
  - job: TestJob
    pool:
      vmImage: $(vmImageName)
    
    steps:
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '$(pythonVersion)'
      displayName: 'Use Python $(pythonVersion)'
    
    - task: PythonScript@0
      displayName: 'Export project path'
      inputs:
        scriptSource: 'inline'
        script: |
          """Search all subdirectories for `manage.py`."""
          from glob import iglob
          from os import path
          # Python >= 3.5
          manage_py = next(iglob(path.join('**', 'manage.py'), recursive=True), None)
          if not manage_py:
              raise SystemExit('Could not find a Django project')
          project_location = path.dirname(path.abspath(manage_py))
          print('Found Django project in', project_location)
          print('##vso[task.setvariable variable=projectRoot]{}'.format(project_location))
    
    - script: |
        python -m pip install --upgrade pip setuptools wheel
        pip install -r requirements.txt
        pip install unittest-xml-reporting
      displayName: 'Install prerequisites'
    
    - script: |
        pushd '$(projectRoot)'
        npm install
        python manage.py collectstatic
      displayName: 'Install and collect statics'
    
    - script: |
        pushd '$(projectRoot)'
        python manage.py test --testrunner xmlrunner.extra.djangotestrunner.XMLTestRunner --no-input
      displayName: 'Run tests'
    
    - task: PublishTestResults@2
      inputs:
        testResultsFiles: "**/TEST-*.xml"
        testRunTitle: 'Python $(PYTHON_VERSION)'
      condition: succeededOrFailed()

- stage: Build
  displayName: Build stage
  dependsOn: Test
  condition: succeeded()
  jobs:
  - job: BuildJob
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '$(pythonVersion)'
      displayName: 'Use Python $(pythonVersion)'
    
    - script: |
        python -m venv antenv
        source antenv/bin/activate
        python -m pip install --upgrade pip
        pip install setup
        pip install -r requirements.txt
      workingDirectory: $(projectRoot)
      displayName: "Install requirements"

    - task: ArchiveFiles@2
      displayName: 'Archive files'
      inputs:
        rootFolderOrFile: '$(projectRoot)'
        includeRootFolder: false
        archiveType: zip
        archiveFile: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
        replaceExistingArchive: true

    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
      displayName: 'Upload package'
      artifact: drop
